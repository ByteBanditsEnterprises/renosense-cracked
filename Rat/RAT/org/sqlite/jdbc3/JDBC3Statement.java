//Raddon On Top!

package org.sqlite.jdbc3;

import org.sqlite.*;
import org.sqlite.core.*;
import java.util.*;
import java.sql.*;

public abstract class JDBC3Statement extends CoreStatement
{
    private int queryTimeout;
    protected long updateCount;
    private boolean exhaustedResults;
    
    protected JDBC3Statement(final SQLiteConnection conn) {
        super(conn);
        this.exhaustedResults = false;
        this.queryTimeout = 0;
    }
    
    public void close() throws SQLException {
        this.internalClose();
    }
    
    public boolean execute(final String sql) throws SQLException {
        this.internalClose();
        final ExtendedCommand.SQLExtension ext;
        boolean result;
        return this.withConnectionTimeout(() -> {
            ext = ExtendedCommand.parse(sql);
            if (ext != null) {
                ext.execute(this.conn.getDatabase());
                return false;
            }
            else {
                this.sql = sql;
                this.conn.getDatabase().prepare((CoreStatement)this);
                result = this.exec();
                this.updateCount = this.getDatabase().changes();
                this.exhaustedResults = false;
                return result;
            }
        });
    }
    
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        return this.execute(sql);
    }
    
    public ResultSet executeQuery(final String sql, final boolean closeStmt) throws SQLException {
        this.rs.closeStmt = closeStmt;
        return this.executeQuery(sql);
    }
    
    public ResultSet executeQuery(final String sql) throws SQLException {
        this.internalClose();
        this.sql = sql;
        return this.withConnectionTimeout(() -> {
            this.conn.getDatabase().prepare((CoreStatement)this);
            if (!this.exec()) {
                this.internalClose();
                throw new SQLException("query does not return ResultSet", "SQLITE_DONE", 101);
            }
            else {
                this.exhaustedResults = false;
                return this.getResultSet();
            }
        });
    }
    
    public int executeUpdate(final String sql) throws SQLException {
        return (int)this.executeLargeUpdate(sql);
    }
    
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        return this.executeUpdate(sql);
    }
    
    public long executeLargeUpdate(final String sql) throws SQLException {
        this.internalClose();
        this.sql = sql;
        final DB db;
        long changes;
        final ExtendedCommand.SQLExtension ext;
        int statusCode;
        return this.withConnectionTimeout(() -> {
            db = this.conn.getDatabase();
            changes = 0L;
            ext = ExtendedCommand.parse(sql);
            if (ext != null) {
                ext.execute(db);
            }
            else {
                try {
                    changes = db.total_changes();
                    statusCode = db._exec(sql);
                    if (statusCode != 0) {
                        throw DB.newSQLException(statusCode, "");
                    }
                    else {
                        changes = db.total_changes() - changes;
                    }
                }
                finally {
                    this.internalClose();
                }
            }
            return changes;
        });
    }
    
    public long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        return this.executeLargeUpdate(sql);
    }
    
    public ResultSet getResultSet() throws SQLException {
        this.checkOpen();
        if (this.exhaustedResults) {
            return null;
        }
        if (this.rs.isOpen()) {
            throw new SQLException("ResultSet already requested");
        }
        if (this.pointer.safeRunInt(DB::column_count) == 0) {
            return null;
        }
        if (this.rs.colsMeta == null) {
            this.rs.colsMeta = (String[])this.pointer.safeRun(DB::column_names);
        }
        this.rs.cols = this.rs.colsMeta;
        this.rs.emptyResultSet = !this.resultsWaiting;
        this.rs.open = true;
        this.resultsWaiting = false;
        return (ResultSet)this.rs;
    }
    
    public int getUpdateCount() throws SQLException {
        return (int)this.getLargeUpdateCount();
    }
    
    public long getLargeUpdateCount() throws SQLException {
        final DB db = this.conn.getDatabase();
        if (!this.pointer.isClosed() && !this.rs.isOpen() && !this.resultsWaiting && this.pointer.safeRunInt(DB::column_count) == 0) {
            return this.updateCount;
        }
        return -1L;
    }
    
    public void addBatch(final String sql) throws SQLException {
        this.internalClose();
        if (this.batch == null || this.batchPos + 1 >= this.batch.length) {
            final Object[] nb = new Object[Math.max(10, this.batchPos * 2)];
            if (this.batch != null) {
                System.arraycopy(this.batch, 0, nb, 0, this.batch.length);
            }
            this.batch = nb;
        }
        this.batch[this.batchPos++] = sql;
    }
    
    public void clearBatch() throws SQLException {
        this.batchPos = 0;
        if (this.batch != null) {
            for (int i = 0; i < this.batch.length; ++i) {
                this.batch[i] = null;
            }
        }
    }
    
    public int[] executeBatch() throws SQLException {
        return Arrays.stream(this.executeLargeBatch()).mapToInt(l -> (int)l).toArray();
    }
    
    public long[] executeLargeBatch() throws SQLException {
        this.internalClose();
        if (this.batch == null || this.batchPos == 0) {
            return new long[0];
        }
        final long[] changes = new long[this.batchPos];
        final DB db = this.conn.getDatabase();
        synchronized (db) {
            try {
                for (int i = 0; i < changes.length; ++i) {
                    try {
                        this.sql = (String)this.batch[i];
                        db.prepare((CoreStatement)this);
                        changes[i] = db.executeUpdate((CoreStatement)this, (Object[])null);
                    }
                    catch (SQLException e) {
                        throw new BatchUpdateException("batch entry " + i + ": " + e.getMessage(), null, 0, changes, e);
                    }
                    finally {
                        if (this.pointer != null) {
                            this.pointer.close();
                        }
                    }
                }
            }
            finally {
                this.clearBatch();
            }
        }
        return changes;
    }
    
    public void setCursorName(final String name) {
    }
    
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }
    
    public void clearWarnings() throws SQLException {
    }
    
    public Connection getConnection() throws SQLException {
        return this.conn;
    }
    
    public void cancel() throws SQLException {
        this.conn.getDatabase().interrupt();
    }
    
    public int getQueryTimeout() throws SQLException {
        return this.queryTimeout;
    }
    
    public void setQueryTimeout(final int seconds) throws SQLException {
        if (seconds < 0) {
            throw new SQLException("query timeout must be >= 0");
        }
        this.queryTimeout = seconds;
    }
    
    public int getMaxRows() throws SQLException {
        return (int)this.rs.maxRows;
    }
    
    public long getLargeMaxRows() throws SQLException {
        return this.rs.maxRows;
    }
    
    public void setMaxRows(final int max) throws SQLException {
        this.setLargeMaxRows(max);
    }
    
    public void setLargeMaxRows(final long max) throws SQLException {
        if (max < 0L) {
            throw new SQLException("max row count must be >= 0");
        }
        this.rs.maxRows = max;
    }
    
    public int getMaxFieldSize() throws SQLException {
        return 0;
    }
    
    public void setMaxFieldSize(final int max) throws SQLException {
        if (max < 0) {
            throw new SQLException("max field size " + max + " cannot be negative");
        }
    }
    
    public int getFetchSize() throws SQLException {
        return ((ResultSet)this.rs).getFetchSize();
    }
    
    public void setFetchSize(final int r) throws SQLException {
        ((ResultSet)this.rs).setFetchSize(r);
    }
    
    public int getFetchDirection() throws SQLException {
        return 1000;
    }
    
    public void setFetchDirection(final int direction) throws SQLException {
        switch (direction) {
            case 1000:
            case 1001:
            case 1002: {}
            default: {
                throw new SQLException("Unknown fetch direction " + direction + ". Must be one of FETCH_FORWARD, FETCH_REVERSE, or FETCH_UNKNOWN in java.sql.ResultSet");
            }
        }
    }
    
    public ResultSet getGeneratedKeys() throws SQLException {
        return this.conn.getSQLiteDatabaseMetaData().getGeneratedKeys();
    }
    
    public boolean getMoreResults() throws SQLException {
        return this.getMoreResults(1);
    }
    
    public boolean getMoreResults(final int current) throws SQLException {
        this.checkOpen();
        if (current == 2 || current == 3) {
            throw new SQLFeatureNotSupportedException("Argument not supported: Statement.KEEP_CURRENT_RESULT or Statement.CLOSE_ALL_RESULTS");
        }
        if (current != 1) {
            throw new SQLException("Invalid argument");
        }
        this.rs.close();
        this.updateCount = -1L;
        this.exhaustedResults = true;
        return false;
    }
    
    public int getResultSetConcurrency() throws SQLException {
        return 1007;
    }
    
    public int getResultSetHoldability() throws SQLException {
        return 2;
    }
    
    public int getResultSetType() throws SQLException {
        return 1003;
    }
    
    public void setEscapeProcessing(final boolean enable) {
    }
    
    protected SQLException unsupported() {
        return new SQLFeatureNotSupportedException("not implemented by SQLite JDBC driver");
    }
    
    public boolean execute(final String sql, final int[] colinds) throws SQLException {
        throw this.unsupported();
    }
    
    public boolean execute(final String sql, final String[] colnames) throws SQLException {
        throw this.unsupported();
    }
    
    public int executeUpdate(final String sql, final int[] colinds) throws SQLException {
        throw this.unsupported();
    }
    
    public int executeUpdate(final String sql, final String[] cols) throws SQLException {
        throw this.unsupported();
    }
    
    public long executeLargeUpdate(final String sql, final int[] colinds) throws SQLException {
        throw this.unsupported();
    }
    
    public long executeLargeUpdate(final String sql, final String[] cols) throws SQLException {
        throw this.unsupported();
    }
    
    protected <T> T withConnectionTimeout(final SQLCallable<T> callable) throws SQLException {
        final int origBusyTimeout = this.conn.getBusyTimeout();
        if (this.queryTimeout > 0) {
            this.conn.setBusyTimeout(1000 * this.queryTimeout);
        }
        try {
            return callable.call();
        }
        finally {
            if (this.queryTimeout > 0) {
                this.conn.setBusyTimeout(origBusyTimeout);
            }
        }
    }
    
    static class BackupObserver implements DB.ProgressObserver
    {
        public void progress(final int remaining, final int pageCount) {
            System.out.printf("remaining:%d, page count:%d%n", remaining, pageCount);
        }
    }
    
    @FunctionalInterface
    protected interface SQLCallable<T>
    {
        T call() throws SQLException;
    }
}
